@page "{teamId:int}"
@model GoalManager.Web.Pages.GoalManagement.GoalSetPointModel
@{
	ViewData["Title"] = "View and Calculate GoalSet Points";
}

<div class="container py-4">
	<div class="d-flex justify-content-between align-items-center mb-4">
		<div>
			<h1 class="h3 fw-light mb-0">View and Calculate GoalSet Points</h1>
		</div>
		<alert-messages error-messages="Model.ErrorMessages" success-messages="Model.SuccessMessages"></alert-messages>
	</div>



	@if (Model.GoalSets.Any())
	{

		<div class="card border-0 shadow-sm">
			<div class="table-responsive">
				<table class="table table-hover mb-0">
					<thead class="bg-light">
						<tr>
							<th class="border-0">Team</th>
							<th class="border-0">User</th>
							<th class="border-0">Point</th>
							<th class="border-0">Character Point</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var goalSet in Model.GoalSets)
						{
							<tr>
								<td class="align-middle">
									<span class="badge bg-light text-dark">@goalSet.TeamId</span>
								</td>
								<td class="align-middle">
									<small class="text-muted">@goalSet.UserId</small>
								</td>
								<td class="align-middle">
									<div class="text-truncate" style="max-width: 150px;">
										@(goalSet.Point == null ? "-" : goalSet.Point)
									</div>
								</td>
								<td class="align-middle">
									<div class="text-truncate" style="max-width: 150px;">
										@(string.IsNullOrEmpty(goalSet.CharacterPoint) ? "-" : goalSet.CharacterPoint)
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
			
			<br />
			<hr>
			<br />

			@if (Model.IsCanCalculate){
				<div class="d-flex justify-content-end gap-2">
					<form asp-page-handler="CalculateCharacterPoint" method="post">
						<button type="submit" class="btn btn-sm btn-outline-success">
							<i class="fas fa-check"></i> Calculate Character Point
						</button>
					</form>
				</div>
			}
			

		</div>
	}



</div>

@functions {
	private int CalculatePercentage(decimal min, decimal max, decimal actual)
	{
		if (max <= min) return 0;
		var percentage = (actual - min) / (max - min) * 100;
		return (int)Math.Clamp(percentage, 0, 100);
	}
}

<style>
	.text-truncate {
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
	}

	.table td, .table th {
		vertical-align: middle;
	}

	.progress {
		min-width: 80px;
		background-color: #e9ecef;
	}

	.badge {
		padding: 0.35em 0.65em;
		font-size: 0.875em;
	}
</style>